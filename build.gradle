plugins {
    id "dev.architectury.loom" version "${loom_version}"
	id "org.jetbrains.kotlin.jvm" version "2.1.10"
	id 'org.jetbrains.kotlin.plugin.serialization' version '2.1.10'
}

version = project.mod_version + '-' + project.minecraft_version + "-forge"
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
    mavenCentral()
    maven { url = "https://repo.spongepowered.org/maven" }
    maven { url = 'https://thedarkcolour.github.io/KotlinForForge/' }
}

loom {
	accessWidenerPath = file("src/main/resources/bahalo.accesswidener")
    forge {
        convertAccessWideners = true
        mixinConfig "blue-archive-halo-client.mixin.json"
    }
}

sourceSets {
    main {
        java { srcDirs = ["src/main/java","src/client/java"] }
        kotlin { srcDirs = ["src/main/kotlin","src/client/kotlin"] }
        resources { srcDirs = ["src/main/resources","src/client/resources"] }
    }
}

dependencies {
    minecraft "net.minecraft:minecraft:${minecraft_version}"
    forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    mappings "net.fabricmc:yarn:$yarn_mappings:v2"

    implementation "thedarkcolour:kotlinforforge:$kff_version"
    compileOnly "org.jetbrains.kotlinx:kotlinx-serialization-core:$kotlin_serialization_version"
    compileOnly "org.jetbrains.kotlinx:kotlinx-serialization-json:$kotlin_serialization_version"
    compileOnly "org.spongepowered:mixin:0.8.5"
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = 17
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            mod_version: mod_version, kff_version: kff_version,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    from("LICENSE") {
        rename { "${it}_${archives_base_name}"}
    }
    manifest {
        attributes([
                'Specification-Title'     : archives_base_name,
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}